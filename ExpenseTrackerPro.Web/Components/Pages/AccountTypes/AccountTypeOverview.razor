@page "/accountTypeOverview"
@using MudBlazor
@using ExpenseTrackerPro.Application.Features.AccountTypes
@using ExpenseTrackerPro.Shared.Enums
@using MediatR
@inject IMediator mediator
<PageTitle>Account Type Overview</PageTitle>

<MudTable ServerData="@(new Func<TableState, Task<TableData<GetAccountTypeResponse>>>(ServerReload))"
          GroupBy="@_groupDefinition" Dense="false" Hover="true" @ref="table" RowsPerPage="20" FixedHeader="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Account Type Overview</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>     
        <MudTh Class="wd-5"></MudTh>
        <MudTh Class="wd-95"><MudTableSortLabel SortLabel="name" T="GetAccountTypeResponse">Account Type Name</MudTableSortLabel></MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="5"><h6>@($"{context.GroupName}: {context.Key}")</h6></MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd><MudImage Src="@(ImageLocation.AccountType.ToString() + context.ImageUrl)"
                Alt="@context.Name" Elevation="25" Class="rounded-sm" Height="@(ImageHeight)" Width="@(ImageWidth)" />
        </MudTd>
         <MudTd DataLabel="Name">@context.Name</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5"></MudTh>
    </GroupFooterTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
    @code {
    private GetAccountTypeView? list;
    private IEnumerable<GetAccountTypeResponse> pagedData;
    private IEnumerable<GetAccountTypeResponse> data;
    private MudTable<GetAccountTypeResponse> table;

    private int totalItems;
    private string searchString = null;

    private int ImageHeight { get; } = 50;
    private int ImageWidth { get; } = 50;

    private TableGroupDefinition<GetAccountTypeResponse> _groupDefinition = new()
    {
        GroupName = "Group",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = true,
        Selector = (e) => e.Classification

    };

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<GetAccountTypeResponse>> ServerReload(TableState state)
    {     
        await LoadData(state.Page, state.PageSize);

        await SortAndPaged(state);

        return new TableData<GetAccountTypeResponse>() { TotalItems = totalItems, Items = pagedData };
    }

    private async Task LoadData(int page, int pageSize)
    {
        list = await mediator.Send(new GetAccountTypeQuery(page,pageSize,""));

        data = list.AccountTypes.Data;

        data = data.Where(item =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;

            if (item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }).ToArray();
        totalItems = data.Count();
    }

    private async Task SortAndPaged(TableState state)
    {
        switch (state.SortLabel)
        {
            case "name":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
        }

        pagedData = data;// data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}