@page "/accountTypeOverview"
@using MudBlazor
@using ExpenseTrackerPro.Application.Features.AccountTypes
@using MediatR
@inject IMediator mediator
<PageTitle>Account Type Overview</PageTitle>

<MudTable ServerData="@(new Func<TableState, Task<TableData<GetAccountTypeResponse>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table" RowsPerPage="10">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Account Type Overview</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="classification" T="GetAccountTypeResponse">Classification</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name" T="GetAccountTypeResponse">Account Type Name</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Classification">@context.Classification</MudTd>
         <MudTd DataLabel="Name">@context.Name</MudTd>

    </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    @code {
    private GetAccountTypeView? list;
    private IEnumerable<GetAccountTypeResponse> pagedData;
    private MudTable<GetAccountTypeResponse> table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<GetAccountTypeResponse>> ServerReload(TableState state)
    {
        list = await mediator.Send(new GetAccountTypeQuery(""));

        IEnumerable<GetAccountTypeResponse> data = list.AccountTypes.Data;

        data = data.Where(item =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (item.Classification.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "classification":
                data = data.OrderByDirection(state.SortDirection, o => o.Classification);
                break;
            case "name":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<GetAccountTypeResponse>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}