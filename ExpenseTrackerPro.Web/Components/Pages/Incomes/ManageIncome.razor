@page "/manageIncome"
@using ExpenseTrackerPro.Application.Features.Incomes
@using MediatR
@inject IMediator mediator
<PageTitle>Manage Income</PageTitle>

<MudTable ServerData="@(new Func<TableState, Task<TableData<GetIncomeResponse>>>(ServerReload))"
          GroupBy="@_groupDefinition" Dense="true" Hover="true" @ref="table" RowsPerPage="20">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Manage Income</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>   
        <MudTh><MudTableSortLabel SortLabel="incomeCategoryName" T="GetIncomeResponse">Category</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="accountName" T="GetIncomeResponse">Account</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="amount" T="GetIncomeResponse">Amount</MudTableSortLabel></MudTh>      
        <MudTh>Note</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="5"><h6>@($"{context.GroupName}: {context.Key}")</h6></MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="IncomeCategoryName">@context.IncomeCategoryName</MudTd>
        <MudTd DataLabel="AccountName">@context.AccountName</MudTd>
        <MudTd DataLabel="Amount">@context.Amount</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
     </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total Per Day : @context.Items.Sum((e)=> e.Amount)</MudTh>
    </GroupFooterTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    </MudTable>
    @code {
    private GetIncomeView? list;
    private IEnumerable<GetIncomeResponse> pagedData;
    private IEnumerable<GetIncomeResponse> data;
    private MudTable<GetIncomeResponse> table;

    private int totalItems;
    private string searchString = null;

    private TableGroupDefinition<GetIncomeResponse> _groupDefinition = new()
        {
            GroupName = "Group",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = true,
            Selector = (e) => e.TransactionDate

        };

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<GetIncomeResponse>> ServerReload(TableState state)
    {
        await LoadData();

        await SortAndPaged(state);

        return new TableData<GetIncomeResponse>() { TotalItems = totalItems, Items = pagedData };
    }

    private async Task LoadData()
    {
        list = await mediator.Send(new GetIncomeQuery(""));

        data = list.Incomes.Data;

        data = data.Where(item =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (item.AccountName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (item.IncomeCategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (item.Amount.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (item.TransactionDate.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }).ToArray();
        totalItems = data.Count();
    }

    private async Task SortAndPaged(TableState state)
    {
        switch (state.SortLabel)
        {
            case "incomeCategoryName":
                data = data.OrderByDirection(state.SortDirection, o => o.IncomeCategoryName);
                break;
            case "accountName":
                data = data.OrderByDirection(state.SortDirection, o => o.AccountName);
                break;
            case "amount":
                data = data.OrderByDirection(state.SortDirection, o => o.Amount);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
    }


    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}
